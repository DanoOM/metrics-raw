0.5.0
* bug fix: metrics generated within same milliseconds would sometimes be dropped. 
0.4.9
* Updated Timer interface - Enable users to manually invoke timer.start(), essentially this allows users to re-use timers, as this resets the starttime.
0.4.6
* Refactor: changed Timer class to interface
* Refactor: 'new timer' RawTimer (same as old Timer class)
* New timer Added: PercentileTimer used to only report percentiles based on x-num samples, see readme for details.
 
0.4.4
* minor Updates - made Long/DoubleEvents constructors public.
* changed 'serviceTeam' to namespace.
0.3.0
* fixed getRegistry() such that a 'trailing' '.' need to be passed in (since this is an internal artifact).
* serviceTeam,appName,appType, host, datacenter values are now all lowercased to improved consistency.
* Duplicate registries that are created (those with the same prefix, will be re-used rather then creating a new instance).
0.2.1
* Bug Fix: MeterImpl, could lose some 'mark' calls under high concurrency at the time of reporting.
0.2.0
* some test clean up.
* Added Meter, updated MetricRepository to support meter scheduling.
0.1.0
* kairosDBListener has been removed, as well as all dependencies on kairosdb. (moved to new github project: metrics-raw-kairosdb).
* added test back in, (some tests still need to be migrated back into the glue).
0.0.11
* Bug Fix: kairosDbListener - thread leak on thread
0.0.10
* Removed Legacy kairosDBListener, (replaced with indexed Implementation).
* Update Metric Registry/Listeners, (Users can now remove listeners, and stop listeners if they are threaded).
0.0.7
* Added KairosIndexedDBListener - handles data collisions within millisecond, by 'indexing' the event.
* Removed EventType - was never used
* Updated MetricRegistry Builder, renamed withHost, withDatacenter to withHostTag, withDatacenterTag
* Gauge threads changed to Daemon Threads.
* updated Test.java - to generate events for each metric type.
0.0.6
* Bug fix related to IndexedTimer.
0.0.5
* Added Experimental IndexedTimer - If 2 timers (same name/'primaryTag') are created within the same millisecond, one can have the metricRegistry 'index' the timer within the millisecond, by created a new tag (index) this will enable datastores with only millisecond precision to store the colliding data values. (should only be used if you expect high tps rates on the timer).
